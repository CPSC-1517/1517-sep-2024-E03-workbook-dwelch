@page "/productcrud"
<PageTitle>Product CRUD</PageTitle>
<!-- remember: if you have buttons to click, you need the following line of code-->
@rendermode InteractiveServer

<!-- additional namespaces-->
@using WestWindSystem.BLL;
@using WestWindSystem.Entities;

<h1>Product CRUD</h1>
<h4>... sample of maintaining a database record using CRUD</h4>

@if (feedbackmsg.Length > 0)
{
    <div class="alert alert-info">
        <p>@feedbackmsg</p>
    </div>
}

@if (errormsgs.Count > 0)
{
    <div class="alert alert-danger">
        <p>Please fix the following issues:</p>
        <ul>
            @foreach (var error in errormsgs)
            {
                <!--
                    If this was a List collection there is only
                    one component, the string
                    therfore you would NOT need the .Value
                -->
                <li>@error</li>
            }
        </ul>
    </div>
}

<!-- EditForm this groups a bunch of controls as a single form
              allows for adding additonal option to integrate with your form controls
              contains a set of enhanced input controls

    register an EditContext instance for this form

     DataAnnotationsValidator   the DataAnnotationsValidator component is used within an
                                EditForm to enable validation based on data annotations
                                applied to model properties.

     ValidationSummary displays a list of all validation errors
                      show a summary of errors at the top of the form
                      errors can be from model properties or custom messages
                      this is optional

     ValidationMessage displays the message associated with the indicated entity field
                      this is optional

    one can still use bootstrap customization of the form appearance
-->

<EditForm EditContext="@editContext">
    <DataAnnotationsValidator />
  @*   <ValidationSummary/> *@
    <div class="row">
        <div class="offset-1 col-md-4">
            <label for="productid" class="form-label">Product ID</label>
            <!--
                We can use enhanced input type controls with EditForm
                No type is need for the EditForm control
                Binding parameter: bind-Value is required when using EditForm controls
            -->
            <InputNumber @bind-Value="CurrentProduct.ProductID"
                    class="form-control" id="productid"
                    style="width:75px;" readonly />
            <br/>
            <label for="productname" class="form-label">Product Name</label>
            <InputText @bind-Value="CurrentProduct.ProductName"
                    class="form-control" id="productname"
                    placeholder="product name" />
            <ValidationMessage For="@(() => CurrentProduct.ProductName)"/>
            <br />
            <label for="supplierlist" class="form-label">Select Supplier</label>
            <InputSelect id="supplierlist" @bind-Value="CurrentProduct.SupplierID"
                    class="form-control">
                <option value="0">... select ...</option>   
                @foreach(Supplier item in supplierList)
                {
                    @*
                        on this option the selected parameter is testing
                            the current supplier id of the supplier list against
                            the current supplier id of the current produce record

                        if there is a match, the select line item will be the
                            line item shown on the page
                    *@
                    <option value="@item.SupplierID"
                            selected="@(item.SupplierID == CurrentProduct.SupplierID)">
                        @item.CompanyName       
                    </option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => CurrentProduct.SupplierID)" />
            <br />
            <label for="categorylist" class="form-label">Select Category</label>
            <InputSelect id="categorylist" @bind-Value="CurrentProduct.CategoryID"
                         class="form-control">
                <option value="0">... select ...</option>
                @foreach (Category item in categoryList)
                {
                    
                    <option value="@item.CategoryID"
                            selected="@(item.CategoryID == CurrentProduct.CategoryID)">
                        @item.CategoryName
                    </option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => CurrentProduct.CategoryID)" />
        </div>
        <div class="offset-1 col-md-4">
            <label for="quantityperunit" class="form-label">Quantity per Unit</label>
            <InputText @bind-Value="CurrentProduct.QuantityPerUnit"
                       class="form-control" id="quantityperunit"
                       placeholder="qty per unit" />
            <ValidationMessage For="@(() => CurrentProduct.QuantityPerUnit)" />
            <br />
            <label for="unitprice" class="form-label">Unit Price</label>
            <InputNumber @bind-Value="CurrentProduct.UnitPrice"
                       class="form-control" id="productname" />
            <ValidationMessage For="@(() => CurrentProduct.UnitPrice)" />
            <br />
            <label for="minimumorderqty" class="form-label">Min Order Qty</label>
            <InputNumber @bind-Value="CurrentProduct.MinimumOrderQuantity"
                         class="form-control" id="minimumorderqty" 
                         placeholder="min order qty"/>
            <ValidationMessage For="@(() => CurrentProduct.MinimumOrderQuantity)" />
            <br />
            <label for="unitsonorder" class="form-label">Units on Order</label>
            <InputNumber @bind-Value="CurrentProduct.UnitsOnOrder"
                         class="form-control" id="unitsonorder" />
            <ValidationMessage For="@(() => CurrentProduct.UnitsOnOrder)" />
        </div>
    </div>
    <br/>
    <div class="row">
        <div class="offset-1 col-md-10 text-center">
            <button type="submit" class="btn btn-outline-primary rounded-pill"
                        @onclick="OnCreate" style="width:180px;">
                Create             
            </button>
        </div>
    </div>
</EditForm>

@code {
    private string feedbackmsg = "";
    private List<string> errormsgs = new List<string>();

    //for EditForm
    private EditContext editContext;
    private Product CurrentProduct = new Product();

    [Inject]
    CategoryServices _categoryServices { get; set; }
    private List<Category> categoryList = new List<Category>();

    [Inject]
    SupplierServices _supplierServices { get; set; }
    private List<Supplier> supplierList = new List<Supplier>();


    protected override void OnInitialized()
    {
        editContext = new EditContext(CurrentProduct);

        categoryList = _categoryServices.Catergory_GetAll();
        supplierList = _supplierServices.Supplier_GetAll();

        base.OnInitialized();
    }

    private Exception GetInnerException(Exception ex)
    {
        //drill down into your Exception until there are no more inner exceptions
        //at this point you have the "real" error
        while (ex.InnerException != null)
            ex = ex.InnerException;
        return ex;
    }

    private void OnCreate()
    {
        feedbackmsg = "inside on create";
    }
}
