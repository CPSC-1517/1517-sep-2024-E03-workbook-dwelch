@page "/productcrud/{productid:int?}"
<!--
    on the page directive above, a routing parameter has been add syntax: /routingname/{parametername:datatype}
    this will allow an integer value to be passed to this page
    the routing parameter (productid) needs to be declare in your code area below

    if you have the situation where your receive page may or maynot receive a parameter
        value THEN make the datatype nullable (?)
-->
<PageTitle>Product CRUD</PageTitle>
<!-- remember: if you have buttons to click, you need the following line of code-->
@rendermode InteractiveServer

<!-- additional namespaces-->
@using WestWindSystem.BLL;
@using WestWindSystem.Entities;
@using Microsoft.JSInterop;

<h1>Product CRUD</h1>
<h4>... sample of maintaining a database record using CRUD</h4>

@if (feedbackmsg.Length > 0)
{
    <div class="alert alert-info">
        <p>@feedbackmsg</p>
    </div>
}

@if (errormsgs.Count > 0)
{
    <div class="alert alert-danger">
        <p>Please fix the following issues:</p>
        <ul>
            @foreach (var error in errormsgs)
            {
                <!--
                    If this was a List collection there is only
                    one component, the string
                    therfore you would NOT need the .Value
                -->
                <li>@error</li>
            }
        </ul>
    </div>
}

<!-- EditForm this groups a bunch of controls as a single form
              allows for adding additonal option to integrate with your form controls
              contains a set of enhanced input controls

    register an EditContext instance for this form

     DataAnnotationsValidator   the DataAnnotationsValidator component is used within an
                                EditForm to enable validation based on data annotations
                                applied to model properties.

     ValidationSummary displays a list of all validation errors
                      show a summary of errors at the top of the form
                      errors can be from model properties or custom messages
                      this is optional

     ValidationMessage displays the message associated with the indicated entity field
                      this is optional

    one can still use bootstrap customization of the form appearance
-->

<EditForm EditContext="@editContext">
    <DataAnnotationsValidator />
  @*   <ValidationSummary/> *@
    <div class="row">
        <div class="offset-1 col-md-4">
            <label for="productid" class="form-label">Product ID</label>
            <!--
                We can use enhanced input type controls with EditForm
                No type is need for the EditForm control
                Binding parameter: bind-Value is required when using EditForm controls
            -->
            <InputNumber @bind-Value="CurrentProduct.ProductID"
                    class="form-control" id="productid"
                    style="width:75px;" readonly />
            <br/>
            <label for="productname" class="form-label">Product Name</label>
            <InputText @bind-Value="CurrentProduct.ProductName"
                    class="form-control" id="productname"
                    placeholder="product name" />
            <ValidationMessage For="@(() => CurrentProduct.ProductName)"/>
            <br />
            <label for="supplierlist" class="form-label">Select Supplier</label>
            <InputSelect id="supplierlist" @bind-Value="CurrentProduct.SupplierID"
                    class="form-control">
                <option value="0">... select ...</option>   
                @foreach(Supplier item in supplierList)
                {
                    @*
                        on this option the selected parameter is testing
                            the current supplier id of the supplier list against
                            the current supplier id of the current produce record

                        if there is a match, the select line item will be the
                            line item shown on the page
                    *@
                    <option value="@item.SupplierID"
                            selected="@(item.SupplierID == CurrentProduct.SupplierID)">
                        @item.CompanyName       
                    </option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => CurrentProduct.SupplierID)" />
            <br />
            <label for="categorylist" class="form-label">Select Category</label>
            <InputSelect id="categorylist" @bind-Value="CurrentProduct.CategoryID"
                         class="form-control">
                <option value="0">... select ...</option>
                @foreach (Category item in categoryList)
                {
                    
                    <option value="@item.CategoryID"
                            selected="@(item.CategoryID == CurrentProduct.CategoryID)">
                        @item.CategoryName
                    </option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => CurrentProduct.CategoryID)" />
        </div>
        <div class="offset-1 col-md-4">
            <label for="quantityperunit" class="form-label">Quantity per Unit</label>
            <InputText @bind-Value="CurrentProduct.QuantityPerUnit"
                       class="form-control" id="quantityperunit"
                       placeholder="qty per unit" />
            <ValidationMessage For="@(() => CurrentProduct.QuantityPerUnit)" />
            <br />
            <label for="unitprice" class="form-label">Unit Price</label>
            <InputNumber @bind-Value="CurrentProduct.UnitPrice"
                       class="form-control" id="productname" />
            <ValidationMessage For="@(() => CurrentProduct.UnitPrice)" />
            <br />
            <label for="minimumorderqty" class="form-label">Min Order Qty</label>
            <InputNumber @bind-Value="CurrentProduct.MinimumOrderQuantity"
                         class="form-control" id="minimumorderqty" 
                         placeholder="min order qty"/>
            <ValidationMessage For="@(() => CurrentProduct.MinimumOrderQuantity)" />
            <br />
            <label for="unitsonorder" class="form-label">Units on Order</label>
            <InputNumber @bind-Value="CurrentProduct.UnitsOnOrder"
                         class="form-control" id="unitsonorder" />
            <ValidationMessage For="@(() => CurrentProduct.UnitsOnOrder)" />
        </div>
    </div>
    <br/>
    <div class="row">
        <div class="offset-1 col-md-10 text-center">
            <button type="submit" class="btn btn-outline-primary rounded-pill"
                        @onclick="OnCreate" style="width:180px;">
                Create             
            </button>
            &nbsp;&nbsp;
            <button type="submit" class="btn btn-outline-secondary rounded-pill"
                    @onclick="OnUpdate" style="width:180px;">
                Update
            </button>
            &nbsp;&nbsp;
            <button type="submit" class="btn btn-outline-secondary rounded-pill"
                    @onclick="OnClear" style="width:180px;">
                Clear
            </button>
            &nbsp;&nbsp;
            <button type="submit" class="btn btn-outline-secondary rounded-pill"
                    @onclick="OnGoTo" style="width:180px;">
                Return to Query
            </button>
        </div>
    </div>
</EditForm>

@code {
    private string feedbackmsg = "";
    private List<string> errormsgs = new List<string>();

    //routing parameter
    //this will receive a value from another location as the page is created
    //this can now be used on this page
    //the datatype definition on the declare statement MUST match the routing parameter declaration
    //NOTE: IF your parameter is of type string, you DO NOT need to add the ?
    [Parameter]
    public int? productid { get; set; }

    //for EditForm
    private EditContext editContext;
    private Product CurrentProduct = new Product();
    //needed for custom validation within the event code
    //allows the user to use the ValidationMesssage controls of the form
    private ValidationMessageStore validationMessageStore;

    [Inject]
    CategoryServices _categoryServices { get; set; }
    private List<Category> categoryList = new List<Category>();

    [Inject]
    SupplierServices _supplierServices { get; set; }
    private List<Supplier> supplierList = new List<Supplier>();

    [Inject]
    ProductServices _productServices { get; set; }

    [Inject]
    protected IJSRuntime _JSRuntime { get; set; }

    [Inject]
    protected NavigationManager _navManager { get; set; }


    protected override void OnInitialized()
    {
        //when the page is first render, we need to determind if the page was called with
        //   a pkey parameter value
        // No value: assumption is a NEW (create) product will be done, nothing to lookup
        // Yes value: assumption an existing product record will be altered or deleted
        //            the current record on the database should be displayed to the user
        //            within this method, lookup the record to display
        //since the productid is a nullable variable, add the .Value to obtain the value
        if (productid.HasValue)
            CurrentProduct = _productServices.Product_GetByID(productid.Value);

        //create the EditContext instance and tie to the entity of the form
        editContext = new EditContext(CurrentProduct);
        //create validation MessageStore instance and indicate which EditContext it is associated with
        validationMessageStore = new ValidationMessageStore(editContext);

        categoryList = _categoryServices.Catergory_GetAll();
        supplierList = _supplierServices.Supplier_GetAll();

        base.OnInitialized();
    }

    private Exception GetInnerException(Exception ex)
    {
        //drill down into your Exception until there are no more inner exceptions
        //at this point you have the "real" error
        while (ex.InnerException != null)
            ex = ex.InnerException;
        return ex;
    }

    private void OnCreate()
    {
        //clear out all old messages
        feedbackmsg = "";
        errormsgs.Clear();
        validationMessageStore.Clear();

        try
        {
            //check to see if the form passes the validation of the entity
            if(editContext.Validate())
            {
                //if there are additional custom validation of your data
                //  you can still do that within the event coding



                //custom validation for this form will check to see if a category
                //  and supplier have been select (why: the list have a prompt that
                //  has a non valid sql foreign key value)

                //Problem:
                // CategoryID is an integer
                // the default of an integer is 0 ( a value)
                // NO foreign key/primary key on the database is 0
                //      if a proper selection is not done, then when the
                //      record is attempted to be added to the the database
                //      the database will thrown an exception

                //Solution: custom validation
                if(CurrentProduct.CategoryID == 0)
                {
                    //construction of the validation message store command
                    // .Add to your instance of the form for the indicated field
                    // parameter 1: the associated field to display the message
                    //              looking for the "field identifier"
                    //              use nameof(xxx) to supplier the "field identifier"
                    // parameter 2: the message to display
                    validationMessageStore.Add(editContext.Field(nameof(CurrentProduct.CategoryID)),
                                "You must select a category.");
                }
                if (CurrentProduct.SupplierID == 0)
                {
                    validationMessageStore.Add(editContext.Field(nameof(CurrentProduct.SupplierID)),
                                 "You must select a supplier.");
                }

                //any other custom validation can be done at this point

                //once your custom validation is done, if there was any, you can check to see
                //  what your validatMessageStore contains
                //if there are any new messages , indicate to the form that the store has been alterd
                //to do this, we will use the Linq method .Any()  to determine if something exists
                //NOTE: the .Any() returns only a true or false; it does NOT return an actual records
                //      the .Where() returns actual record
                if(editContext.GetValidationMessages().Any())
                {
                    //notify the editcontext that there has be a change to the message store
                    editContext.NotifyValidationStateChanged();
                }
                else
                {
                    //the program assumes that the data is clean and can be further processed

                    //call the product services to receive the "good" data and add it to the database
                    //call the appropriate service method and pass the current product instance
                    int newproductid = _productServices.Product_Add(CurrentProduct);

                    //if an error was thrown by the ProductServices or by the database
                    //  control will be passed to the catch
                    //if no error was thrown by the ProductServices or by the database
                    //  one assumes the data is on the database: success
                    //you need to communicate with the user this success
                    feedbackmsg = $"Product {CurrentProduct.ProductName} (ID: {newproductid}) has been added to the database.";
                }
            }

        }
        catch (ArgumentNullException ex)
        {
            errormsgs.Add($"Missing Data: {GetInnerException(ex).Message}");
        }
        catch (ArgumentException ex)
        {
            errormsgs.Add($"Data Issue: {GetInnerException(ex).Message}");
        }
        catch(Exception ex)
        {
            errormsgs.Add($"System Error: {GetInnerException(ex).Message}");
        }
    }

    private void OnUpdate()
    {
        //clear out all old messages
        feedbackmsg = "";
        errormsgs.Clear();
        validationMessageStore.Clear();

        try
        {
            //check to see if the form passes the validation of the entity
            if (editContext.Validate())
            {

                if (CurrentProduct.CategoryID == 0)
                {
                    validationMessageStore.Add(editContext.Field(nameof(CurrentProduct.CategoryID)),
                                "You must select a category.");
                }
                if (CurrentProduct.SupplierID == 0)
                {
                    validationMessageStore.Add(editContext.Field(nameof(CurrentProduct.SupplierID)),
                                 "You must select a supplier.");
                }

                if (editContext.GetValidationMessages().Any())
                {
                    editContext.NotifyValidationStateChanged();
                }
                else
                {
                    //the program assumes that the data is clean and can be further processed

                    int rowsaffected = _productServices.Product_Update(CurrentProduct);


                    //SPECIAL!!!!!!! use to check that the result of a rowaffected
                    //  being 0 because an update was done BUT no record was actually altered
                    //Comment out OR remove after doing the message check
                    //rowsaffected = 0;

                    //the rowsaffected will dictate the message sent to the user
                    if (rowsaffected != 0)
                    {
                        feedbackmsg = $"Product {CurrentProduct.ProductName} (ID: {CurrentProduct.ProductID}) has been updated on the database.";
                    }
                    else
                    {
                        feedbackmsg = $"Product {CurrentProduct.ProductName} " +
                                    $" (ID: {CurrentProduct.ProductID}) has not been updated. " +
                                    " Check to see if the product still exists on file.";
                    }
                }
            }

        }
        catch (ArgumentNullException ex)
        {
            errormsgs.Add($"Missing Data: {GetInnerException(ex).Message}");
        }
        catch (ArgumentException ex)
        {
            errormsgs.Add($"Data Issue: {GetInnerException(ex).Message}");
        }
        catch (Exception ex)
        {
            errormsgs.Add($"System Error: {GetInnerException(ex).Message}");
        }
    }

    private async Task OnClear()
    {
        object[] message = new object[] {"Clearing the form will lose all unsaved data. Are you sure you wish to continue?"};
        if (await _JSRuntime.InvokeAsync<bool>("confirm", message))
        {
            feedbackmsg = "";
            errormsgs.Clear();
            validationMessageStore.Clear();
            CurrentProduct = new Product();
            //remember to attach the new product to your editContext
            editContext = new EditContext(CurrentProduct);
        }
    }

    private async Task OnGoTo()
    {
        object[] message = new object[] { "Leaving the form will lose all unsaved data. Are you sure you wish to continue?" };
        if (await _JSRuntime.InvokeAsync<bool>("confirm", message))
        {
            _navManager.NavigateTo("categoryproducts");
        }
    }
}
