@page "/tablequerypagination"
<PageTitle>Table Query</PageTitle>
<!-- remember: if you have buttons to click, you need the following line of code-->
@rendermode InteractiveServer

<!-- 

              Additional package setup

    you will need to add the NuGet package BlazorBootStrap
    you will need to add a using statement 
            using BlazorBootstrap
-->
<!-- additional namespaces-->
@using BlazorBootstrap;
@using WestWindSystem.BLL;
@using WestWindSystem.Entities;

<h1>Shipment Query (using pagination)</h1>
<h4>... non primary key filter search</h4>

@if (feedbackmsg.Length > 0)
{
    <div class="alert alert-info">
        <p>@feedbackmsg</p>
    </div>
}

@if (errormsgs.Count > 0)
{
    <div class="alert alert-danger">
        <p>Please fix the following issues:</p>
        <ul>
            @foreach (var error in errormsgs)
            {
                <li>@error</li>
            }
        </ul>
    </div>
}

<div class="row">
    <div class="offset-1 col-md-3">
        <p><strong>Input of query values</strong></p>
        <label for="year">Enter shipment year:</label> &nbsp;&nbsp;
        <input id="year" type="number" @bind="yeararg"
        style="width:75px" />
        <br />
        <label for="month">Enter shipment month:</label> &nbsp;&nbsp;
        <input id="month" type="number" @bind="montharg"
        style="width:75px" />
        <br />
        <button type="submit" @onclick="GetByYearAndMonth"
        class="btn btn-outline-primary rounded-pill">
            Fetch Shipments
        </button>
    </div>
    <div class="col-md-7">
        <p><strong>Display of query results</strong></p>
        @if (datainfo.Count == 0)
        {
            <p>No data found for requested query</p>
        }
        else
        {
            //to reduce the number of data rows being displayed there are two techniques
            //a) pagination
            //b) scrolling

            //this example use the Bootstrap Pagination tag:
            //Reguired
            //      total records possibly returned: totalItems
            //      total required pages depending on totalItems: GetTotalPage()
            //      current page number: currentPageNumber
            //      items per page: itemsPerPage
            //      collection to hold records that will be displayed: datainfo

            //depending on the zoom of window you may seem to lose some of the last line


            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Order</th>
                        <th>Date</th>
                        <th>Shipper</th>
                        <th>Freight $</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in datainfo)
                    {
                        <tr>
                            <td>@item.ShipmentID</td>
                            <td>@item.OrderID</td>
                            <td>@item.ShippedDate.ToShortDateString()</td>
                            <td>@item.ShipViaNavigation.CompanyName</td>
                            <td align="right">@(string.Format("{0:#,##0.00}", item.FreightCharge))</td>
                        </tr>
                    }
                </tbody>
            </table>
            <!--
                this tag will display 5 page numbers at a time
                it contains the usual First Previous page numbers Next Last layout
                HOWEVER, it does not adjust the page numbers to have a continious
                            display of pages like  4 5 6 7 8
                         instead it is 1 2 3 4 5 then 6 7 8 9 10 then 11 12 ..
                         but it you look at the first/last number there is a small space
                            near the top of the display that is empty and can be clicked
                            as if it is the expected ... normally displayed
            -->
            <Pagination ActivePageNumber="@currentPageNumber"
                        TotalPages="GetTotalPage()"
                        PageChanged="OnPageChanged">
            </Pagination>
        }
    </div>
</div>

@code {
    private string feedbackmsg = "";
    List<string> errormsgs = new List<string>();

    private int yeararg = 0;
    private int montharg = 0;

    [Inject]
    ShipmentServices _shipmentServices { get; set; }
    private List<Shipment> datainfo = new List<Shipment>();

    // Pagination
    private int currentPageNumber = 1;
    private int itemsPerPage = 5; //developer decision try 10, then 8, then 5

    // pagination: 2nd solution: get the total number of items back,
    // and then show the data page by page
    private int totalItems = 0;

    public void GetByYearAndMonth()
    {
        feedbackmsg = "";
        errormsgs.Clear();
        datainfo.Clear();


        //check simply logical validation
        if (yeararg < 1950 || yeararg > DateTime.Today.AddDays(1).Year)
        {
            errormsgs.Add("Year needs to be between 1950 and today");
        }
        if (montharg < 1 || montharg > 12)
        {
            errormsgs.Add("Month is invalid, use 1 to 12");
        }

        if (errormsgs.Count == 0)
        {
            //the query arguments are deemed valid
            //since the next statement calls a services which
            //  in itself could abort, the call NEEDS to be in a try/catch
            try
            {
                //need to call a service for
                //    get the total number of records from on the database
                //    get only the number of records needed to display on the current page
                totalItems = _shipmentServices.Shipment_GetByYearAndMonth_Count(yeararg, montharg);
                datainfo = _shipmentServices.Shipment_GetByYearAndMonth_Pagination(yeararg, montharg, itemsPerPage, currentPageNumber);
            }
            catch (Exception ex)
            {
                errormsgs.Add($"System error: {ex.Message}");
            }
        }
    }

    protected override void OnInitialized()
    {
        //using the .Include method on the query itself (see Shipment query for this technique in BLL ShipmentServices)
        base.OnInitialized();
    }

    private int GetTotalPage()
    {
        //calculate total pages for Pagination tag
        int totalPage = (totalItems + itemsPerPage -1) / itemsPerPage;
        return totalPage;

    }

    // Pagination:  get the data needed for that page
    //              the pagenumber is the selected page number from the action
    //                  of pressing a button in the <Pagination> tag
    private void OnPageChanged(int newPageNumber)
    {
        currentPageNumber = newPageNumber;
        datainfo = _shipmentServices.Shipment_GetByYearAndMonth_Pagination(yeararg, montharg, itemsPerPage, currentPageNumber);

    }
}
